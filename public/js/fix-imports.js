// fix-imports.js - Corre√ß√£o para problemas de imports
// Adicione este script ANTES dos outros scripts nas suas p√°ginas HTML

// Aguardar AlshamSupabase estar dispon√≠vel
function waitForAlshamSupabase(callback) {
  if (window.AlshamSupabase && window.AlshamSupabase.supabase) {
    callback();
  } else {
    setTimeout(() => waitForAlshamSupabase(callback), 100);
  }
}

// Disponibilizar fun√ß√µes globalmente para compatibilidade
waitForAlshamSupabase(() => {
  // Extrair fun√ß√µes do AlshamSupabase para o escopo global
  const {
    showAuthNotification,
    getCurrentSession,
    getCurrentOrgId,
    genericSelect,
    genericInsert,
    genericUpdate,
    genericDelete,
    getLeads,
    createLead,
    checkBoutcesses,
    signOut,
    onAuthStateChange
  } = window.AlshamSupabase;

  // Disponibilizar globalmente para arquivos que precisam
  window.showAuthNotification = showAuthNotification;
  window.getCurrentSession = getCurrentSession;
  window.getCurrentOrgId = getCurrentOrgId;
  window.genericSelect = genericSelect;
  window.genericInsert = genericInsert;
  window.genericUpdate = genericUpdate;
  window.genericDelete = genericDelete;
  window.getLeads = getLeads;
  window.createLead = createLead;
  window.checkBoutcesses = checkBoutcesses;
  window.signOut = signOut;
  window.onAuthStateChange = onAuthStateChange;

  // Fun√ß√£o checkRouteAccess que estava faltando
  window.checkRouteAccess = function(route) {
    console.log(`üõ°Ô∏è Verificando acesso √† rota: ${route}`);
    // Por enquanto, permitir acesso a todas as rotas
    // Implementar l√≥gica de autoriza√ß√£o conforme necess√°rio
    return true;
  };

  // Chart.js fix
  if (window.Chart) {
    window.ChartJS = window.Chart;
  }

  console.log('üîß Fix-imports aplicado com sucesso!');
  console.log('üîß Fun√ß√µes dispon√≠veis globalmente:', [
    'showAuthNotification', 'getCurrentSession', 'getCurrentOrgId',
    'genericSelect', 'genericInsert', 'genericUpdate', 'genericDelete',
    'getLeads', 'createLead', 'checkBoutcesses', 'signOut', 'onAuthStateChange',
    'checkRouteAccess'
  ]);
});

// Fun√ß√£o utilit√°ria para aguardar depend√™ncias
window.waitFor = function(condition, callback, timeout = 5000) {
  const startTime = Date.now();
  
  function check() {
    if (condition()) {
      callback();
    } else if (Date.now() - startTime < timeout) {
      setTimeout(check, 100);
    } else {
      console.error('‚ö†Ô∏è Timeout aguardando condi√ß√£o:', condition.toString());
    }
  }
  
  check();
};

-- ════════════════════════════════════════════════════════════════════════
-- ⚜️ ALSHAM 360° PRIMA — SYSTEM MANIFESTS REGISTRY v1.0
-- ════════════════════════════════════════════════════════════════════════
-- 📅 Data: 2025-10-23
-- 🧠 Autoridade: CITIZEN SUPREMO X.1
-- 🛡️ Missão: Registrar metadados, manifests e estados de módulos do sistema
-- ════════════════════════════════════════════════════════════════════════

create table if not exists public.system_manifests (
  id text primary key,
  name text not null,
  version text not null,
  category text,
  description text,
  payload jsonb not null default '{}'::jsonb,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

comment on table public.system_manifests is 'Repositório central de manifests e metadados dos módulos ALSHAM.';

-- Índices auxiliares
create index if not exists idx_system_manifests_category on public.system_manifests(category);
create index if not exists idx_system_manifests_version on public.system_manifests(version);

-- Atualiza timestamp automaticamente
create or replace function public.fn_update_timestamp_system_manifests()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = now();
  return new;
end;
$$;

create trigger trg_update_system_manifests
before update on public.system_manifests
for each row
execute function public.fn_update_timestamp_system_manifests();

-- Políticas RLS
alter table public.system_manifests enable row level security;

create policy org_select_system_manifests
  on public.system_manifests
  for select
  using (auth.role() = 'authenticated' or auth.role() = 'service_role');

create policy org_insert_system_manifests
  on public.system_manifests
  for insert
  with check (auth.role() = 'service_role');

create policy org_update_system_manifests
  on public.system_manifests
  for update
  using (auth.role() = 'service_role');

-- ════════════════════════════════════════════════════════════════════════
-- 🧪 Teste inicial
-- ════════════════════════════════════════════════════════════════════════
insert into public.system_manifests (id, name, version, category, description, payload)
values (
  'test_manifest',
  'Manifesto de Teste',
  'v1.0',
  'Governance',
  'Teste de inicialização do registro de manifests',
  '{"ok": true}'::jsonb
)
on conflict (id) do update set
  version = excluded.version,
  payload = excluded.payload,
  updated_at = now();

select * from public.system_manifests;
-- ════════════════════════════════════════════════════════════════════════

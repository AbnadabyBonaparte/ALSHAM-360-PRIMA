-- ════════════════════════════════════════════════════════════════════════
-- ⚜️ ALSHAM 360° PRIMA — SYSTEM MANIFESTS REGISTRY (v1.0)
-- ════════════════════════════════════════════════════════════════════════
-- 📅 Data: 2025-10-23
-- 🧠 Autoridade: CITIZEN SUPREMO X.1
-- 🏛️ Módulo: Governance Core
-- 🧩 Missão: Criar o registro central de manifests e metadados dos módulos
-- ════════════════════════════════════════════════════════════════════════

-- 1️⃣ Criação da tabela
create table if not exists public.system_manifests (
  id text primary key,
  name text not null,
  version text not null,
  category text,
  description text,
  payload jsonb not null default '{}'::jsonb,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

comment on table public.system_manifests is
  'Repositório central de manifests e metadados dos módulos ALSHAM 360° PRIMA.';

-- 2️⃣ Índices auxiliares
create index if not exists idx_system_manifests_category on public.system_manifests(category);
create index if not exists idx_system_manifests_version on public.system_manifests(version);

-- 3️⃣ Trigger e função de atualização automática
create or replace function public.fn_update_timestamp_system_manifests()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = now();
  return new;
end;
$$;

drop trigger if exists trg_update_system_manifests on public.system_manifests;

create trigger trg_update_system_manifests
before update on public.system_manifests
for each row
execute function public.fn_update_timestamp_system_manifests();

-- 4️⃣ Row Level Security
alter table public.system_manifests enable row level security;

create policy if not exists org_select_system_manifests
  on public.system_manifests
  for select
  using (auth.role() in ('authenticated', 'service_role'));

create policy if not exists org_insert_system_manifests
  on public.system_manifests
  for insert
  with check (auth.role() = 'service_role');

create policy if not exists org_update_system_manifests
  on public.system_manifests
  for update
  using (auth.role() = 'service_role');

-- 5️⃣ Teste inicial
insert into public.system_manifests (id, name, version, category, description, payload)
values (
  'test_manifest',
  'Manifesto de Teste',
  'v1.0',
  'Governance',
  'Teste de inicialização do registro de manifests',
  '{"ok": true}'::jsonb
)
on conflict (id) do update set
  version = excluded.version,
  payload = excluded.payload,
  updated_at = now();

-- 6️⃣ Verificação final
select * from public.system_manifests order by created_at desc;

-- ════════════════════════════════════════════════════════════════════════
-- ✅ Resultado esperado:
-- id              | name                 | version | category   | updated_at
-- ----------------|----------------------|----------|-------------|-----------------
-- test_manifest   | Manifesto de Teste   | v1.0     | Governance  | 2025-10-23 ...
-- ════════════════════════════════════════════════════════════════════════

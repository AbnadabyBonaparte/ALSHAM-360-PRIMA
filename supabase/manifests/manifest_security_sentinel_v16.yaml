-- ════════════════════════════════════════════════════════════════════════
-- ⚜️ ALSHAM 360° PRIMA — SYSTEM MANIFESTS REGISTRY (v1.0 ABSOLUTO)
-- ════════════════════════════════════════════════════════════════════════
-- 📅 Data: 2025-10-23
-- 🧠 Autoridade: CITIZEN SUPREMO X.1
-- 🛡️ Missão: Criar o registro central de manifests e metadados dos módulos
-- ════════════════════════════════════════════════════════════════════════

-- 1️⃣ Garantir schema público ativo
set search_path to public;

-- 2️⃣ Criar extensão necessária para UUIDs (se ainda não existir)
create extension if not exists "pgcrypto";

-- 3️⃣ Criar tabela
create table if not exists public.system_manifests (
    id text primary key,
    name text not null,
    version text not null,
    category text,
    description text,
    payload jsonb not null default '{}'::jsonb,
    created_at timestamptz default now(),
    updated_at timestamptz default now()
);

comment on table public.system_manifests is
'Registro central de manifests e metadados do ecossistema ALSHAM 360° PRIMA.';

-- 4️⃣ Índices auxiliares
create index if not exists idx_system_manifests_category on public.system_manifests(category);
create index if not exists idx_system_manifests_version on public.system_manifests(version);

-- 5️⃣ Função de atualização automática de timestamp
create or replace function public.fn_update_timestamp_system_manifests()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = now();
  return new;
end;
$$;

-- 6️⃣ Trigger vinculada à função
drop trigger if exists trg_update_system_manifests on public.system_manifests;

create trigger trg_update_system_manifests
before update on public.system_manifests
for each row
execute function public.fn_update_timestamp_system_manifests();

-- 7️⃣ Ativar segurança por linha
alter table public.system_manifests enable row level security;

-- 8️⃣ Políticas básicas de acesso
drop policy if exists org_select_system_manifests on public.system_manifests;
drop policy if exists org_insert_system_manifests on public.system_manifests;
drop policy if exists org_update_system_manifests on public.system_manifests;

create policy org_select_system_manifests
  on public.system_manifests
  for select
  using (auth.role() in ('authenticated', 'service_role'));

create policy org_insert_system_manifests
  on public.system_manifests
  for insert
  with check (auth.role() = 'service_role');

create policy org_update_system_manifests
  on public.system_manifests
  for update
  using (auth.role() = 'service_role');

-- 9️⃣ Inserção de teste
insert into public.system_manifests (id, name, version, category, description, payload)
values (
  'test_manifest',
  'Manifesto de Teste',
  'v1.0',
  'Governance',
  'Teste de criação do registro de manifests.',
  '{"ok": true}'::jsonb
)
on conflict (id) do update set
  version = excluded.version,
  payload = excluded.payload,
  updated_at = now();

-- 🔟 Verificação final
select '✅ Tabela system_manifests criada com sucesso.' as status_message;
select * from public.system_manifests order by created_at desc;
-- ════════════════════════════════════════════════════════════════════════
